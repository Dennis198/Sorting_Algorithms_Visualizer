{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/insertionSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/heapSort.js","sortingAlgorithms/cocktailSort.js","sortingAlgorithms/selectionSort.js","sortingAlgorithms/bogoSort.js","sortingAlgorithms/shellSort.js","sortingAlgorithms/radixSort.js","sortingAlgorithms/gnomeSort.js","Sorting_Visualizer/SortVisualizer.js","sortingAlgorithms/bubbleSort.js","App.js","reportWebVitals.js","index.js"],"names":["COLOR_CHANGE","COLOR_FOCUS","COLOR_NORMAL","HEIGHT_CHANGE","mergeSort","array","animations","length","auxilaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","quickSort","quickSortHelper","left","right","pi","pivot","l","r","t","partition","heapSort","heap","heapSortHelper","father","end","son","isSorted","GAPS","radixSort","m","max","getMax","exp","countSort","output","Array","fill","count","PrettoSlider","withStyles","root","color","height","thumb","width","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","track","borderRadius","rail","Slider","SortVisualizer","props","intervalID","intervalID_isSortFinished","state","computeSpeed","isRunning","barSize","sliderValue","this","resetArray","sizeBar","random","setState","newArray","swap","bubbleSort","animateSort","temp","insertionSort","intervall","shellSort","minIdx","selectionSort","randomI","randomJ","counter","bogoSort","lenth","index","gnomeSort","swapped","start","cocktailSort","resetColor","success","setInterval","arrayBars","document","getElementsByClassName","colorChange","colorValue","barOneIdx","barTwoIdx_OR_Height","barOneStyle","style","barTwoStyle","stopInterval","id","clearInterval","e","val","className","Button","disabled","variant","onClick","handleSizeChange","stopAllInterval","map","value","idx","valueLabelDisplay","aria-label","defaultValue","min","onChange","handleSpeedChange","marks","onChangeCommitted","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f729185b.chunk.js","sourcesContent":["\r\n/** \r\n This file computes merge sort algorithm\r\n on a given array \"array\" and rembember all the changes\r\n to display the Algorithm in const \"animations\"\r\n*/\r\n\r\n/**\r\nMerge Sort\r\nhttps://en.wikipedia.org/wiki/Merge_sort  \r\n*/\r\nconst COLOR_CHANGE = true;\r\nconst COLOR_FOCUS = true;\r\nconst COLOR_NORMAL = false;\r\nconst HEIGHT_CHANGE = false;\r\n\r\nexport function mergeSort(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    const auxilaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length-1, auxilaryArray, animations);\r\n    return animations\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxilaryArray,\r\n    animations\r\n){\r\n    if(startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx+endIdx)/2);\r\n    //Split the array recursivly to smaller subarays\r\n    mergeSortHelper(auxilaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxilaryArray, middleIdx+1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxilaryArray, animations); \r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxilaryArray,\r\n    animations\r\n){\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx+1;\r\n    while(i <= middleIdx && j <= endIdx){\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,i,j]);\r\n        if(auxilaryArray[i] <= auxilaryArray[j]){\r\n            animations.push([HEIGHT_CHANGE,null,k,auxilaryArray[i]]);\r\n            mainArray[k++] = auxilaryArray[i++];\r\n            animations.push([COLOR_CHANGE,COLOR_NORMAL,k-1,i-1]);\r\n        } else {\r\n            animations.push([HEIGHT_CHANGE,null,k,auxilaryArray[j]]);\r\n            mainArray[k++] = auxilaryArray[j++];\r\n            animations.push([COLOR_CHANGE,COLOR_NORMAL,k-1,j-1]);\r\n        }\r\n    }\r\n    while(i <= middleIdx){\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,k,i]);\r\n        animations.push([HEIGHT_CHANGE,null,k,auxilaryArray[i]]);\r\n        animations.push([COLOR_CHANGE,COLOR_NORMAL,i,k]);\r\n        mainArray[k++] = auxilaryArray[i++];\r\n    }\r\n    while(j <= endIdx){\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,k,j]);\r\n        animations.push([HEIGHT_CHANGE,null,k,auxilaryArray[j]]);\r\n        animations.push([COLOR_CHANGE,COLOR_NORMAL,k,j]);\r\n        mainArray[k++] = auxilaryArray[j++];\r\n    }\r\n}","/** \r\n This file computes insertion sort algorithm\r\n on a given array \"array\" and rembember all the changes\r\n to display the Algorithm in const \"animations\"\r\n*/\r\n\r\n/**\r\nInserition sort\r\nhttps://en.wikipedia.org/wiki/Bubble_sort  \r\n*/\r\nconst COLOR_CHANGE = true;\r\nconst COLOR_FOCUS = true;\r\nconst COLOR_NORMAL = false;\r\nconst HEIGHT_CHANGE = false;\r\n\r\nexport function insertionSort(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    let length = array.length;\r\n\r\n    for(let i=1; i<length; i++){\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,i-1,i]);\r\n        if(array[i-1] > array[i]){\r\n            let temp  = array[i];\r\n            let k = i;\r\n            for(; k>0 && array[k-1]>temp;k--){\r\n                animations.push([COLOR_CHANGE,COLOR_FOCUS,k-1,k]);\r\n                animations.push([HEIGHT_CHANGE,null,k,array[k-1]]);\r\n                animations.push([COLOR_CHANGE,COLOR_NORMAL,k-1,k]);\r\n                array[k] = array[k-1];\r\n            }\r\n            animations.push([COLOR_CHANGE,COLOR_FOCUS,i,k]);\r\n            animations.push([HEIGHT_CHANGE,null,k,temp]);\r\n            animations.push([COLOR_CHANGE,COLOR_NORMAL,i,k]);\r\n            array[k] = temp;\r\n            continue;\r\n        }\r\n        animations.push([COLOR_CHANGE,COLOR_NORMAL,i-1,i]);\r\n    }\r\n    return animations;\r\n}","/** \r\n This file computes quick sort algorithm\r\n on a given array \"array\" and rembember all the changes\r\n to display the Algorithm in const \"animations\"\r\n*/\r\n\r\n/**\r\nQuick Sort:\r\nhttps://en.wikipedia.org/wiki/Quicksort \r\n*/\r\nconst COLOR_CHANGE = true;\r\nconst COLOR_FOCUS = true;\r\nconst COLOR_NORMAL = false;\r\nconst HEIGHT_CHANGE = false;\r\n\r\nexport function quickSort(array){\r\n    const animations = [];\r\n    if(array.length<=1) return array;\r\n    quickSortHelper(array, 0, array.length-1, animations);\r\n    return animations\r\n}\r\n\r\nfunction quickSortHelper(array, left, right, animations){\r\n    if(left < right){\r\n        //pi Index of Pivo element\r\n        let pi = partition(array, left, right, animations);\r\n        quickSortHelper(array, left, pi-1, animations);\r\n        quickSortHelper(array, pi+1, right, animations);\r\n    }\r\n}\r\n\r\nfunction partition(array, left, right, animations){\r\n    let pivot = array[right]; // Pivo element\r\n    let l = left;\r\n    let r = right - 1;\r\n    while(l<r){\r\n        while(l < right && array[l] < pivot) l++;\r\n        while(r > left && array[r] >= pivot) r--;\r\n        if(l<r){\r\n            animations.push([COLOR_CHANGE,COLOR_FOCUS,l,r]);\r\n            animations.push([HEIGHT_CHANGE,null,l,array[r]]);\r\n            animations.push([HEIGHT_CHANGE,null,r,array[l]]);\r\n            animations.push([COLOR_CHANGE,COLOR_NORMAL,l,r]);\r\n            let t = array[l];\r\n            array[l] = array[r];\r\n            array[r] = t;\r\n        } \r\n    }\r\n    if(array[l]>pivot){\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,l,right]);\r\n        animations.push([HEIGHT_CHANGE,null,l,array[right]]);\r\n        animations.push([HEIGHT_CHANGE,null,right,array[l]]);\r\n        animations.push([COLOR_CHANGE,COLOR_NORMAL,l,right]);\r\n        let t = array[l];\r\n        array[l] = array[right];\r\n        array[right] = t;\r\n    }\r\n    return l; // Position of new Pivo element\r\n}\r\n","/** \r\n This file computes heap sort algorithm\r\n on a given array \"array\" and rembember all the changes\r\n to display the Algorithm in const \"animations\"\r\n*/\r\n\r\n/**\r\nHeap Sort\r\nhttps://en.wikipedia.org/wiki/Heapsort\r\n*/\r\nconst COLOR_CHANGE = true;\r\nconst COLOR_FOCUS = true;\r\nconst COLOR_NORMAL = false;\r\nconst HEIGHT_CHANGE = false;\r\n\r\nexport function heapSort(array){\r\n    const animations = [];\r\n    if(array.length<=1) return array;\r\n    heapSortHelper(array, animations);\r\n    return animations\r\n}\r\n\r\nfunction heapSortHelper(array, animations){\r\n    // Create Heap-Attribute\r\n    for(let i=array.length/2; i>=0; i--){\r\n        heap(array, i, array.length-1,animations);\r\n    }\r\n\r\n    // Sort\r\n    for(let i=array.length-1; i>0;i--){\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,0,i]);\r\n        animations.push([HEIGHT_CHANGE,null,0,array[i]]);\r\n        animations.push([HEIGHT_CHANGE,null,i,array[0]]);\r\n        animations.push([COLOR_CHANGE,COLOR_NORMAL,0,i]);\r\n        //Swap the smalles(root in Heap) to beginning\r\n        let t = array[i];\r\n        array[i] = array[0];\r\n        array[0] = t;\r\n        //Create Heap-Attribute for Subtree\r\n        heap(array, 0, i-1, animations);\r\n    }\r\n\r\n    //Invert the array\r\n    for(let i=0, k=array.length-1;i<array.length/2; i++){\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,i,k]);\r\n        animations.push([HEIGHT_CHANGE,null,i,array[k]]);\r\n        animations.push([HEIGHT_CHANGE,null,k,array[i]]);\r\n        animations.push([COLOR_CHANGE,COLOR_NORMAL,i,k]);\r\n        let t = array[i];\r\n        array[i] = array[k];\r\n        array[k] = t;\r\n        k--;\r\n    }\r\n}\r\n\r\nfunction heap(array, father, end, animations){\r\n    let left = 2 * father + 1;\r\n    let right = 2 * father + 2;\r\n    let son = father;\r\n\r\n    if(left <= end){\r\n        if(array[father]>array[left]) son = left;\r\n    }\r\n    if(right <= end){\r\n        if(array[son]>array[right]) son = right;\r\n    }\r\n    if(father !== son){\r\n        animations.push([COLOR_CHANGE, COLOR_FOCUS,father,son]);\r\n        animations.push([HEIGHT_CHANGE, null,father,array[son]]);\r\n        animations.push([HEIGHT_CHANGE, null,son,array[father]]);\r\n        animations.push([COLOR_CHANGE, COLOR_NORMAL,father,son]);\r\n        let t = array[son];\r\n        array[son] = array[father];\r\n        array[father] = t;\r\n        heap(array, son, end, animations);\r\n    }\r\n}\r\n","/** \r\n This file computes cocktail sort algorithm\r\n on a given array \"array\" and rembember all the changes\r\n to display the Algorithm in const \"animations\"\r\n*/\r\n\r\n/**\r\nCocktail sort\r\nhttps://en.wikipedia.org/wiki/Cocktail_shaker_sort \r\n*/\r\nconst COLOR_CHANGE = true;\r\nconst COLOR_FOCUS = true;\r\nconst COLOR_NORMAL = false;\r\nconst HEIGHT_CHANGE = false;\r\n\r\nexport function cocktailSort(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    let swapped = true;\r\n    let start = 0;\r\n    let end = array.length;\r\n\r\n    // if no elements have been swapped, then the list is sorted\r\n    while(swapped){\r\n        swapped=false;\r\n\r\n        for(let i = start; i< end-1;++i){\r\n            animations.push([COLOR_CHANGE,COLOR_FOCUS,i,i+1]);\r\n            // test whether the two elements are in the wrong order\r\n            if(array[i]>array[i+1]){\r\n                animations.push([HEIGHT_CHANGE,null,i, array[i+1]]);\r\n                animations.push([HEIGHT_CHANGE,null,i+1, array[i]]);\r\n                // let the two elements change places\r\n                let t = array[i];\r\n                array[i] = array[i+1];\r\n                array[i+1] = t;\r\n                swapped=true;\r\n            }\r\n            animations.push([COLOR_CHANGE,COLOR_NORMAL,i,i+1]);\r\n        }\r\n\r\n        if(!swapped){ \r\n            // we can exit the outer loop here if no swaps occurred.\r\n            return animations;\r\n        }\r\n\r\n        swapped=false;\r\n        end--;\r\n\r\n        for(let i=end-1;i>=start;i--){\r\n            animations.push([COLOR_CHANGE,COLOR_FOCUS,i,i+1]);\r\n            // test whether the two elements are in the wrong order\r\n            if(array[i]>array[i+1]){\r\n                animations.push([HEIGHT_CHANGE,null,i, array[i+1]]);\r\n                animations.push([HEIGHT_CHANGE,null,i+1, array[i]]);\r\n                // let the two elements change places\r\n                let t = array[i];\r\n                array[i] = array[i+1];\r\n                array[i+1] = t;\r\n                swapped=true;\r\n            }\r\n            animations.push([COLOR_CHANGE,COLOR_NORMAL,i,i+1]);\r\n        }\r\n\r\n        start++;\r\n    }\r\n\r\n    return animations;\r\n}\r\n","/** \r\n This file computes selection sort algorithm\r\n on a given array \"array\" and rembember all the changes\r\n to display the Algorithm in const \"animations\"\r\n*/\r\n\r\n/**\r\nSelection sort    \r\nhttps://en.wikipedia.org/wiki/Selection_sort\r\n*/\r\nconst COLOR_CHANGE = true;\r\nconst COLOR_FOCUS = true;\r\nconst COLOR_NORMAL = false;\r\nconst HEIGHT_CHANGE = false;\r\n\r\nexport function selectionSort(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n\r\n    for(let i=0;i<array.length;i++){\r\n        let minIdx = i;\r\n        for(let k = i+1; k<array.length;k++){\r\n            animations.push([COLOR_CHANGE,COLOR_FOCUS,k,k]);\r\n            if(array[minIdx]>array[k]){\r\n                minIdx = k;\r\n            }\r\n            animations.push([COLOR_CHANGE,COLOR_NORMAL,k,k]);\r\n        }\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,i,minIdx]);\r\n        animations.push([HEIGHT_CHANGE,null,i,array[minIdx]]);\r\n        animations.push([HEIGHT_CHANGE,null,minIdx,array[i]]);\r\n        animations.push([COLOR_CHANGE,COLOR_NORMAL,i,minIdx]);\r\n        let t = array[i];\r\n        array[i] = array[minIdx];\r\n        array[minIdx] = t;\r\n    }\r\n\r\n    return animations;\r\n}","/** \r\n This file computes insertion bogo algorithm\r\n on a given array \"array\" and rembember all the changes\r\n to display the Algorithm in const \"animations\"\r\n*/\r\n\r\n/**\r\nBogo sort\r\nhttps://en.wikipedia.org/wiki/Bogo_sort  \r\n*/\r\nconst MAX_SORT_STEPS=30000; \r\nconst COLOR_CHANGE = true;\r\nconst COLOR_FOCUS = true;\r\nconst COLOR_NORMAL = false;\r\nconst HEIGHT_CHANGE = false;\r\n\r\nexport function bogoSort(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    let length = array.length;\r\n    let randomI=0;\r\n    let randomJ=0;\r\n    let temp;\r\n    let counter = 0;\r\n\r\n    //Changes to Random position in the array and check if the array is sorted.\r\n    while(!isSorted(array,animations) && counter<MAX_SORT_STEPS){\r\n        randomI=Math.floor(Math.random()*length);\r\n        randomJ=Math.floor(Math.random()*length);\r\n        animations.push([COLOR_CHANGE, COLOR_FOCUS, randomI, randomJ]);\r\n        animations.push([HEIGHT_CHANGE, null, randomI, array[randomJ]]);\r\n        animations.push([HEIGHT_CHANGE, null, randomJ, array[randomI]]);\r\n        animations.push([COLOR_CHANGE, COLOR_NORMAL, randomI, randomJ]);\r\n        temp = array[randomI];\r\n        array[randomI] = array[randomJ];\r\n        array[randomJ] = temp;\r\n        counter++;\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\n//Check if array is Sorted\r\nfunction isSorted(array,animations){\r\n    for(let i=0;i<array.length-1;i++){\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,i,i]);\r\n        animations.push([COLOR_CHANGE,COLOR_NORMAL,i,i]);\r\n        if(array[i]>array[i+1]) return false;\r\n    }\r\n    return true;\r\n}","/** \r\n This file computes insertion shell algorithm\r\n on a given array \"array\" and rembember all the changes\r\n to display the Algorithm in const \"animations\"\r\n*/\r\n\r\n/**\r\nShell sort\r\nhttps://en.wikipedia.org/wiki/Shell_sort  \r\n*/ \r\n\r\n//gaps\r\nconst GAPS=[1,4,10,23,57,132,301,701];\r\nconst COLOR_CHANGE = true;\r\nconst COLOR_FOCUS = true;\r\nconst COLOR_NORMAL = false;\r\nconst HEIGHT_CHANGE = false;\r\n\r\nexport function shellSort(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    \r\n    for(let k = GAPS.length-1;k>=0;k--){\r\n        if(k>=array.length)continue;\r\n        let intervall=GAPS[k];\r\n        for(let i = intervall; i < array.length;i++){\r\n            let temp = array[i];\r\n            let j;\r\n            for(j=i; j>=intervall && array[j-intervall] > temp; j-=intervall){\r\n                animations.push([COLOR_CHANGE,COLOR_FOCUS,j,j-intervall]);\r\n                animations.push([HEIGHT_CHANGE,null,j,array[j-intervall]]);\r\n                animations.push([COLOR_CHANGE,COLOR_NORMAL,j,j-intervall]);\r\n                array[j] = array[j - intervall];\r\n            }\r\n            animations.push([COLOR_CHANGE,COLOR_FOCUS,i,j]);\r\n            animations.push([HEIGHT_CHANGE,null,j,temp]);\r\n            animations.push([COLOR_CHANGE,COLOR_NORMAL,i,j]);\r\n            array[j] = temp;\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n","/** \r\n This file computes radix sort algorithm\r\n on a given array \"array\" and rembember all the changes\r\n to display the Algorithm in const \"animations\"\r\n*/\r\n\r\n/**\r\nradix sort\r\nhttps://en.wikipedia.org/wiki/Gnome_sort  \r\n*/ \r\nconst COLOR_CHANGE = true;\r\nconst COLOR_FOCUS = true;\r\nconst COLOR_NORMAL = false;\r\nconst HEIGHT_CHANGE = false;\r\n\r\nexport function radixSort(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    let m = getMax(array,animations);\r\n    for(let exp=1;Math.floor(m/exp)>0;exp*=10){\r\n        countSort(array, exp, animations);\r\n    }\r\n\r\n    return animations;\r\n}\r\n\r\nfunction getMax(array,animations){\r\n    let max=array[0];\r\n    for(let i=1; i<array.length;i++){\r\n        if(array[i]>max) max=array[i];\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,i-1,i])\r\n        animations.push([COLOR_CHANGE,COLOR_NORMAL,i-1,i])\r\n    }\r\n    return max;\r\n}\r\n\r\n// A function to do counting sort of arr[] according to \r\n// the digit represented by exp. \r\nfunction countSort(array, exp, animations){\r\n    let output = new Array(array.length).fill(0);\r\n    let i;\r\n    let count = new Array(10).fill(0);\r\n\r\n// Store count of occurrences in count[] \r\n    for(i=0;i<array.length;i++){\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,i,i]);\r\n        animations.push([COLOR_CHANGE,COLOR_NORMAL,i,i]);\r\n        count[Math.floor((array[i]/exp))%10]++;\r\n    }\r\n\r\n        // Change count[i] so that count[i] now contains \r\n        // actual position of this digit in output[] \r\n    for(i=1; i<10;i++){\r\n        count[i] += count[i-1];\r\n    }\r\n\r\n    // Build the output array\r\n    for(i = array.length-1;i>=0;i--){\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,i,count[Math.floor((array[i]/exp)) % 10] -1]);\r\n        animations.push([HEIGHT_CHANGE,null,count[Math.floor((array[i]/exp)) % 10] -1,array[i]]);\r\n        animations.push([COLOR_CHANGE,COLOR_NORMAL,i,count[Math.floor((array[i]/exp)) % 10] -1]);\r\n        output[count[Math.floor((array[i]/exp)) % 10] -1] = array[i];\r\n        count[Math.floor((array[i]/exp)) % 10]--;\r\n    }\r\n\r\n    // Copy the output array to arr[], so that arr[] now \r\n    // contains sorted numbers according to curent digit \r\n    for(i=0; i<array.length;i++){\r\n        array[i]=output[i];\r\n    }\r\n}\r\n","/** \r\n This file computes Gnome sort algorithm\r\n on a given array \"array\" and rembember all the changes\r\n to display the Algorithm in const \"animations\"\r\n*/\r\n\r\n/**\r\nGnome sort\r\nhttps://en.wikipedia.org/wiki/Gnome_sort  \r\n*/ \r\nconst COLOR_CHANGE = true;\r\nconst COLOR_FOCUS = true;\r\nconst COLOR_NORMAL = false;\r\nconst HEIGHT_CHANGE = false;\r\n\r\nexport function gnomeSort(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    let lenth = array.length;\r\n    let index = 0;\r\n\r\n    while(index < lenth){\r\n        if(index===0) index++;\r\n        animations.push([COLOR_CHANGE,COLOR_FOCUS,index,index-1]);\r\n        if(array[index]>=array[index-1]){\r\n            animations.push([COLOR_CHANGE,COLOR_NORMAL,index,index-1]);\r\n            index++;\r\n        } \r\n        else{\r\n            animations.push([HEIGHT_CHANGE,null,index,array[index-1]]);\r\n            animations.push([HEIGHT_CHANGE,null,index-1,array[index]]);\r\n            let t = array[index];\r\n            array[index] = array[index-1];\r\n            array[index-1] = t;\r\n            animations.push([COLOR_CHANGE,COLOR_NORMAL,index,index-1]);\r\n            index--;\r\n        }\r\n    }\r\n    \r\n    \r\n    return animations;\r\n}\r\n","import React from 'react'\r\nimport \"./SortVisualizer.css\"\r\nimport {mergeSort} from \"../sortingAlgorithms/mergeSort\";\r\nimport {bubbleSort} from \"../sortingAlgorithms/bubbleSort\";\r\nimport {insertionSort} from \"../sortingAlgorithms/insertionSort\";\r\nimport {quickSort} from \"../sortingAlgorithms/quickSort\";\r\nimport {heapSort} from \"../sortingAlgorithms/heapSort\";\r\nimport {cocktailSort} from \"../sortingAlgorithms/cocktailSort\"\r\nimport {selectionSort} from \"../sortingAlgorithms/selectionSort\";\r\nimport {bogoSort} from \"../sortingAlgorithms/bogoSort\";\r\nimport {shellSort} from \"../sortingAlgorithms/shellSort\";\r\nimport {radixSort} from \"../sortingAlgorithms/radixSort\";\r\nimport {gnomeSort} from \"../sortingAlgorithms/gnomeSort\";\r\nimport { Button, Slider } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport PropTypes from 'prop-types';\r\n\r\n  /**\r\n  Code for the custom slider look\r\n  * */ \r\n  function ValueLabelComponent(props) {\r\n    const { children, open, value } = props;\r\n  \r\n    return (\r\n      <Tooltip open={open} enterTouchDelay={0} placement=\"top\" title={value}>\r\n        {children}\r\n      </Tooltip>\r\n    );\r\n  }\r\n  ValueLabelComponent.propTypes = {\r\n    children: PropTypes.element.isRequired,\r\n    open: PropTypes.bool.isRequired,\r\n    value: PropTypes.number.isRequired,\r\n  };\r\n\r\n  const PrettoSlider = withStyles({\r\n    root: {\r\n      color: 'red',\r\n      height: 8,\r\n    },\r\n    thumb: {\r\n      height: 24,\r\n      width: 24,\r\n      backgroundColor: '#fff',\r\n      border: '2px solid currentColor',\r\n      marginTop: -8,\r\n      marginLeft: -12,\r\n      '&:focus, &:hover, &$active': {\r\n        boxShadow: 'inherit',\r\n      },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n    rail: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n  })(Slider);\r\n/**End Slide Code */\r\n\r\n  const DEFAULT_SPEED=5;\r\n  const DEFAULT_BAR_SIZE=5;\r\n  const DEFAULT_BAR_SLIDER=2;\r\n  const DEFAULT_MAX_VALUE=300;\r\n  const DEFAULT_MIN_VALUE=5;\r\n\r\nexport default class SortVisualizer extends React.Component{\r\n    intervalID = 0;\r\n    intervalID_isSortFinished = 0;\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {\r\n            array: [],\r\n            computeSpeed: DEFAULT_SPEED,\r\n            isRunning: false,\r\n            barSize: DEFAULT_BAR_SIZE,\r\n            sliderValue: DEFAULT_BAR_SLIDER,\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(sizeBar=136){\r\n        const array = [];\r\n        for(let i=0; i<sizeBar; i++){\r\n            array.push(Math.floor(Math.random() * DEFAULT_MAX_VALUE) + DEFAULT_MIN_VALUE);\r\n        }\r\n        this.setState({array});\r\n    }\r\n\r\n    //Compute and animate Bubble sort\r\n    bubbleSort(){\r\n        let newArray = this.state.array.slice();      \r\n        const animations = bubbleSort(newArray);\r\n        this.setState({isRunning: true});\r\n        this.animateSort(animations,newArray);\r\n    }\r\n\r\n    //Compute and animte Insertion Sort\r\n    insertionSort(){\r\n        let newArray = this.state.array.slice();      \r\n        const animations = insertionSort(newArray);\r\n        this.setState({isRunning: true});\r\n        this.animateSort(animations,newArray);\r\n    }\r\n\r\n    //Compute and animte Insertion Sort\r\n    radixSort(){\r\n        let newArray = this.state.array.slice();      \r\n        const animations = radixSort(newArray);\r\n        this.setState({isRunning: true});\r\n        this.animateSort(animations,newArray);\r\n    }\r\n\r\n    //Compute and animte Insertion Sort\r\n    shellSort(){\r\n        let newArray = this.state.array.slice();      \r\n        const animations = shellSort(newArray);\r\n        this.setState({isRunning: true});\r\n        this.animateSort(animations,newArray);\r\n    }\r\n\r\n    //Compute and animate Selection sort\r\n    selectionSort(){\r\n        let newArray = this.state.array.slice();      \r\n        const animations = selectionSort(newArray);\r\n        this.setState({isRunning: true});\r\n        this.animateSort(animations,newArray);\r\n    }\r\n\r\n    //Compute and animate Bogo sort\r\n    bogoSort(){\r\n        let newArray = this.state.array.slice();      \r\n        const animations = bogoSort(newArray);\r\n        this.setState({isRunning: true});\r\n        this.animateSort(animations,newArray);\r\n    }\r\n\r\n    //Compute and animate Bogo sort\r\n    gnomeSort(){\r\n        let newArray = this.state.array.slice();      \r\n        const animations = gnomeSort(newArray);\r\n        this.setState({isRunning: true});\r\n        this.animateSort(animations,newArray);\r\n    }\r\n\r\n    //Compute and animate Bogo sort\r\n    cocktailSort(){\r\n        let newArray = this.state.array.slice();      \r\n        const animations = cocktailSort(newArray);\r\n        this.setState({isRunning: true});\r\n        this.animateSort(animations,newArray);\r\n    }\r\n\r\n    //Compute and animate merge sort\r\n    mergeSort(){\r\n        let newArray = this.state.array.slice();      \r\n        const animations = mergeSort(newArray);\r\n        this.setState({isRunning: true});\r\n        this.animateSort(animations,newArray);\r\n    }\r\n\r\n    //Compute and animate quick sort\r\n    quickSort(){\r\n        let newArray = this.state.array.slice();      \r\n        const animations = quickSort(newArray);\r\n        this.setState({isRunning: true});\r\n        this.animateSort(animations,newArray);\r\n    }\r\n\r\n    //Compute and animate heap sort\r\n    heapSort(){\r\n        let newArray = this.state.array.slice();      \r\n        const animations = heapSort(newArray);\r\n        this.setState({isRunning: true});\r\n        this.animateSort(animations, newArray);\r\n    }\r\n    \r\n    //Animates the Sorting Algorithms\r\n    animateSort(animations,newArray){\r\n        this.resetColor();\r\n\r\n        let index=0;\r\n        let success = false;\r\n        this.intervalID = setInterval(() => {\r\n            const arrayBars = document.getElementsByClassName('sortvisualizer__ArrayBar');\r\n            const [colorChange, colorValue, barOneIdx, barTwoIdx_OR_Height] = animations[index];\r\n            if(colorChange){\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx_OR_Height].style;\r\n                const color = colorValue ? 'lightcoral' : 'darkslateblue';\r\n                barOneStyle.backgroundColor = color;\r\n                barTwoStyle.backgroundColor = color;\r\n            }else{\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                barOneStyle.height = `${barTwoIdx_OR_Height}px`;               \r\n            }\r\n            index++;\r\n            if(index===animations.length) {\r\n                this.stopInterval(this.intervalID);\r\n                success=true;\r\n            }\r\n        },this.state.computeSpeed);\r\n\r\n        //Checks every 500ms if Sorting animation is finished\r\n        this.intervalID_isSortFinished = setInterval(() => {\r\n            if(success){\r\n                const arrayBars = document.getElementsByClassName('sortvisualizer__ArrayBar');\r\n                for(let i=0; i<this.state.array.length;i++){\r\n                        const barOneStyle = arrayBars[i].style;\r\n                        barOneStyle.backgroundColor = \"green\";\r\n                } \r\n                this.stopInterval(this.intervalID_isSortFinished);\r\n                this.setState({isRunning: false, array: newArray});\r\n            }\r\n        },500);\r\n    }\r\n\r\n       //Stops the \"Visual\" Training\r\n    stopInterval(id){\r\n        clearInterval(id);\r\n        this.setState({isRunning:false});\r\n    }\r\n\r\n    stopAllInterval(){\r\n        this.stopInterval(this.intervalID);\r\n        this.stopInterval(this.intervalID_isSortFinished);\r\n    }\r\n\r\n    resetColor(){\r\n            const arrayBars = document.getElementsByClassName('sortvisualizer__ArrayBar');\r\n            for(let i=0; i<this.state.array.length;i++){\r\n                    const barOneStyle = arrayBars[i].style;\r\n                    barOneStyle.backgroundColor = \"darkslateblue\";              \r\n            }\r\n    }\r\n\r\n    //event Handler for Speed Change (animation speed)\r\n    handleSpeedChange(e, val){ \r\n        this.setState({computeSpeed : val})\r\n    }\r\n\r\n    //event Handler for size and count of Bars\r\n    handleSizeChange(e, val){\r\n        const arrayBars = document.getElementsByClassName('sortvisualizer__ArrayBar');\r\n        for(let i=0; i<this.state.array.length;i++){\r\n                const barOneStyle = arrayBars[i].style;\r\n                barOneStyle.backgroundColor = \"darkslateblue\";\r\n        }\r\n        switch(val){\r\n            case 0:\r\n                this.resetArray(320);\r\n                this.setState({barSize: 1});\r\n                break;\r\n            case 1:\r\n                this.resetArray(190);\r\n                this.setState({barSize: 3});\r\n                break;\r\n            case 2:\r\n                this.resetArray(136);\r\n                this.setState({barSize: 5});\r\n                break; \r\n            case 3:\r\n                this.resetArray(80);\r\n                this.setState({barSize: 10});\r\n                break;\r\n            case 4:\r\n                this.resetArray(40);\r\n                this.setState({barSize: 20});\r\n                break;\r\n            case 5:\r\n                this.resetArray(20);\r\n                this.setState({barSize: 40});\r\n                break;\r\n            default:;     \r\n        }\r\n        this.setState({sliderValue: val});\r\n    }\r\n\r\n    render(){\r\n        const {array, isRunning, barSize} = this.state;\r\n\r\n        return(\r\n            <div className=\"sortvisualizer\">\r\n                <div className=\"sortvisualizer__Button\">\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"secondary\" onClick={(e) => this.handleSizeChange(e,this.state.sliderValue)}>Generate New Numbers</Button>\r\n                        <Button variant=\"contained\" color=\"secondary\" onClick={() => this.stopAllInterval()}>Stop</Button>\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => this.bubbleSort()}>Bubble Sort</Button>\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => this.selectionSort()}>Selection Sort</Button>\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => this.insertionSort()}>Insertion Sort</Button>\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => this.mergeSort()}>Merge Sort</Button>\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => this.quickSort()}>Quick Sort</Button>\r\n                    </div>\r\n                    <div className=\"sortvisualizer__Button\">\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => this.heapSort()}>Heap Sort</Button>\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => this.cocktailSort()}>Cocktail Sort</Button>\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => this.gnomeSort()}>Gnome Sort</Button>\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => this.radixSort()}>Radix Sort</Button>\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => this.shellSort()}>Shell Sort</Button>\r\n                        <Button disabled={isRunning} variant=\"contained\" color=\"primary\" onClick={() => this.bogoSort()}>Bogo Sort</Button>\r\n                    </div> \r\n                <div className=\"sortvisualizer__ArrayBars\">\r\n                    {array.map((value,idx) =>(\r\n                        <div className=\"sortvisualizer__ArrayBar\" key={idx} style={{height: `${value}px`, width:`${barSize}px`}}>                      \r\n                        </div>\r\n                    ))}\r\n                    <div className=\"sortvisualizer__ArrayBar_Stabalizer\" key={5000} style={{height: `300px`, width:`5px`}}>                      \r\n                        </div>\r\n                </div>\r\n                <div className=\"sortvisualizer__Sliders\">\r\n                        <div className=\"sortvisualizer__Slider\">\r\n                            <PrettoSlider disabled={isRunning} valueLabelDisplay=\"off\" aria-label=\"pretto slider\" defaultValue={5} min={0} max={50}\r\n                                onChange={(e, val) => this.handleSpeedChange(e, val)}  \r\n                            />\r\n                            <div className=\"sortvisualizer__Slider__Label\">\r\n                                <h5>Fast</h5>\r\n                                <h4>Compute Speed</h4>\r\n                                <h5>Slow</h5>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"sortvisualizer__Slider\">\r\n                            <PrettoSlider disabled={isRunning} valueLabelDisplay=\"off\" aria-label=\"pretto slider\" defaultValue={DEFAULT_BAR_SLIDER} min={0} max={5}\r\n                                marks={true} onChangeCommitted={(e, val) => this.handleSizeChange(e,val)}\r\n                             />\r\n                            <div className=\"sortvisualizer__Slider__Label\">\r\n                                <h5>Small</h5>\r\n                                <h4>Bar Size</h4>\r\n                                <h5>Big</h5>\r\n                            </div>\r\n                        </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n}\r\n","/** \r\n This file computes bubble sort algorithm\r\n on a given array \"array\" and rembember all the changes\r\n to display the Algorithm in const \"animations\"\r\n*/\r\n\r\n/**\r\nBubble sort\r\nhttps://en.wikipedia.org/wiki/Bubble_sort  \r\n*/\r\n\r\nconst COLOR_CHANGE = true;\r\nconst COLOR_FOCUS = true;\r\nconst COLOR_NORMAL = false;\r\nconst HEIGHT_CHANGE = false;\r\n\r\nexport function bubbleSort(array){\r\n    const animations = [];\r\n    if(array.length <= 1) return array;\r\n    let length = array.length;\r\n    let swap = true;\r\n    for(let i=0; i<length && swap; i++){\r\n        swap=false;\r\n        for(let k=0;k<length-i-1; k++){\r\n            animations.push([COLOR_CHANGE,COLOR_FOCUS,k,k+1]);\r\n            if(array[k] > array[k+1]){\r\n                let t = array[k];\r\n                animations.push([HEIGHT_CHANGE,null,k,array[k+1]]);\r\n                animations.push([HEIGHT_CHANGE,null,k+1,array[k]]);\r\n                array[k] = array[k+1];\r\n                array[k+1] = t;\r\n                swap=true;\r\n            }\r\n            animations.push([COLOR_CHANGE,COLOR_NORMAL,k,k+1]);\r\n\r\n        }\r\n    }\r\n    return animations;\r\n}\r\n","import './App.css';\nimport SortVisualizer from  \"./Sorting_Visualizer/SortVisualizer\"\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>Visualizing Sorting Algorithms</h1>\n      <SortVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}